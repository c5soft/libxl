/* automatically generated by rust-bindgen 0.69.1 */

pub const LIBXL_VERSION: u32 = 67239936;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type max_align_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagBookHandle {
    _unused: [u8; 0],
}
pub type BookHandle = *mut tagBookHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSheetHandle {
    _unused: [u8; 0],
}
pub type SheetHandle = *mut tagSheetHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagFormatHandle {
    _unused: [u8; 0],
}
pub type FormatHandle = *mut tagFormatHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagFontHandle {
    _unused: [u8; 0],
}
pub type FontHandle = *mut tagFontHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagAutoFilterHandle {
    _unused: [u8; 0],
}
pub type AutoFilterHandle = *mut tagAutoFilterHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagFilterColumnHandle {
    _unused: [u8; 0],
}
pub type FilterColumnHandle = *mut tagFilterColumnHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRichStringHandle {
    _unused: [u8; 0],
}
pub type RichStringHandle = *mut tagRichStringHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagFormControlHandle {
    _unused: [u8; 0],
}
pub type FormControlHandle = *mut tagFormControlHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagConditionalFormattingHandle {
    _unused: [u8; 0],
}
pub type ConditionalFormattingHandle = *mut tagConditionalFormattingHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagConditionalFormatHandle {
    _unused: [u8; 0],
}
pub type ConditionalFormatHandle = *mut tagConditionalFormatHandle;
extern "C" {
    pub fn xlCreateBookCW() -> BookHandle;
}
extern "C" {
    pub fn xlCreateXMLBookCW() -> BookHandle;
}
extern "C" {
    pub fn xlBookLoadW(handle: BookHandle, filename: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSaveW(handle: BookHandle, filename: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadUsingTempFileW(
        handle: BookHandle,
        filename: *const wchar_t,
        tempFile: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSaveUsingTempFileW(
        handle: BookHandle,
        filename: *const wchar_t,
        useTempFile: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadPartiallyW(
        handle: BookHandle,
        filename: *const wchar_t,
        sheetIndex: ::std::os::raw::c_int,
        firstRow: ::std::os::raw::c_int,
        lastRow: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadPartiallyUsingTempFileW(
        handle: BookHandle,
        filename: *const wchar_t,
        sheetIndex: ::std::os::raw::c_int,
        firstRow: ::std::os::raw::c_int,
        lastRow: ::std::os::raw::c_int,
        tempFile: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadWithoutEmptyCellsW(
        handle: BookHandle,
        filename: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadInfoW(handle: BookHandle, filename: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadRawW(
        handle: BookHandle,
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookLoadRawPartiallyW(
        handle: BookHandle,
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
        sheetIndex: ::std::os::raw::c_int,
        firstRow: ::std::os::raw::c_int,
        lastRow: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSaveRawW(
        handle: BookHandle,
        data: *mut *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookAddSheetW(
        handle: BookHandle,
        name: *const wchar_t,
        initSheet: SheetHandle,
    ) -> SheetHandle;
}
extern "C" {
    pub fn xlBookInsertSheetW(
        handle: BookHandle,
        index: ::std::os::raw::c_int,
        name: *const wchar_t,
        initSheet: SheetHandle,
    ) -> SheetHandle;
}
extern "C" {
    pub fn xlBookGetSheetW(handle: BookHandle, index: ::std::os::raw::c_int) -> SheetHandle;
}
extern "C" {
    pub fn xlBookGetSheetNameW(handle: BookHandle, index: ::std::os::raw::c_int) -> *const wchar_t;
}
extern "C" {
    pub fn xlBookSheetTypeW(
        handle: BookHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookMoveSheetW(
        handle: BookHandle,
        srcIndex: ::std::os::raw::c_int,
        dstIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookDelSheetW(
        handle: BookHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSheetCountW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookAddFormatW(handle: BookHandle, initFormat: FormatHandle) -> FormatHandle;
}
extern "C" {
    pub fn xlBookAddFormatFromStyleW(
        handle: BookHandle,
        style: ::std::os::raw::c_int,
    ) -> FormatHandle;
}
extern "C" {
    pub fn xlBookAddFontW(handle: BookHandle, initFont: FontHandle) -> FontHandle;
}
extern "C" {
    pub fn xlBookAddRichStringW(handle: BookHandle) -> RichStringHandle;
}
extern "C" {
    pub fn xlBookAddCustomNumFormatW(
        handle: BookHandle,
        customNumFormat: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookCustomNumFormatW(handle: BookHandle, fmt: ::std::os::raw::c_int)
        -> *const wchar_t;
}
extern "C" {
    pub fn xlBookFormatW(handle: BookHandle, index: ::std::os::raw::c_int) -> FormatHandle;
}
extern "C" {
    pub fn xlBookFormatSizeW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookFontW(handle: BookHandle, index: ::std::os::raw::c_int) -> FontHandle;
}
extern "C" {
    pub fn xlBookFontSizeW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookAddConditionalFormatW(handle: BookHandle) -> ConditionalFormatHandle;
}
extern "C" {
    pub fn xlBookDatePackW(
        handle: BookHandle,
        year: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
        day: ::std::os::raw::c_int,
        hour: ::std::os::raw::c_int,
        min: ::std::os::raw::c_int,
        sec: ::std::os::raw::c_int,
        msec: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn xlBookDateUnpackW(
        handle: BookHandle,
        value: f64,
        year: *mut ::std::os::raw::c_int,
        month: *mut ::std::os::raw::c_int,
        day: *mut ::std::os::raw::c_int,
        hour: *mut ::std::os::raw::c_int,
        min: *mut ::std::os::raw::c_int,
        sec: *mut ::std::os::raw::c_int,
        msec: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookColorPackW(
        handle: BookHandle,
        red: ::std::os::raw::c_int,
        green: ::std::os::raw::c_int,
        blue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookColorUnpackW(
        handle: BookHandle,
        color: ::std::os::raw::c_int,
        red: *mut ::std::os::raw::c_int,
        green: *mut ::std::os::raw::c_int,
        blue: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlBookActiveSheetW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetActiveSheetW(handle: BookHandle, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlBookPictureSizeW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookGetPictureW(
        handle: BookHandle,
        index: ::std::os::raw::c_int,
        data: *mut *const ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookAddPictureW(handle: BookHandle, filename: *const wchar_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookAddPicture2W(
        handle: BookHandle,
        data: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookAddPictureAsLinkW(
        handle: BookHandle,
        filename: *const wchar_t,
        insert: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookDefaultFontW(
        handle: BookHandle,
        fontSize: *mut ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlBookSetDefaultFontW(
        handle: BookHandle,
        fontName: *const wchar_t,
        fontSize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlBookRefR1C1W(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetRefR1C1W(handle: BookHandle, refR1C1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlBookSetKeyW(handle: BookHandle, name: *const wchar_t, key: *const wchar_t);
}
extern "C" {
    pub fn xlBookRgbModeW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetRgbModeW(handle: BookHandle, rgbMode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlBookCalcModeW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetCalcModeW(handle: BookHandle, calcMode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlBookVersionW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookBiffVersionW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookIsDate1904W(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetDate1904W(handle: BookHandle, date1904: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlBookIsTemplateW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetTemplateW(handle: BookHandle, tmpl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlBookIsWriteProtectedW(handle: BookHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookSetLocaleW(
        handle: BookHandle,
        locale: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlBookErrorMessageW(handle: BookHandle) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xlBookReleaseW(handle: BookHandle);
}
pub const Color_COLOR_BLACK: Color = 8;
pub const Color_COLOR_WHITE: Color = 9;
pub const Color_COLOR_RED: Color = 10;
pub const Color_COLOR_BRIGHTGREEN: Color = 11;
pub const Color_COLOR_BLUE: Color = 12;
pub const Color_COLOR_YELLOW: Color = 13;
pub const Color_COLOR_PINK: Color = 14;
pub const Color_COLOR_TURQUOISE: Color = 15;
pub const Color_COLOR_DARKRED: Color = 16;
pub const Color_COLOR_GREEN: Color = 17;
pub const Color_COLOR_DARKBLUE: Color = 18;
pub const Color_COLOR_DARKYELLOW: Color = 19;
pub const Color_COLOR_VIOLET: Color = 20;
pub const Color_COLOR_TEAL: Color = 21;
pub const Color_COLOR_GRAY25: Color = 22;
pub const Color_COLOR_GRAY50: Color = 23;
pub const Color_COLOR_PERIWINKLE_CF: Color = 24;
pub const Color_COLOR_PLUM_CF: Color = 25;
pub const Color_COLOR_IVORY_CF: Color = 26;
pub const Color_COLOR_LIGHTTURQUOISE_CF: Color = 27;
pub const Color_COLOR_DARKPURPLE_CF: Color = 28;
pub const Color_COLOR_CORAL_CF: Color = 29;
pub const Color_COLOR_OCEANBLUE_CF: Color = 30;
pub const Color_COLOR_ICEBLUE_CF: Color = 31;
pub const Color_COLOR_DARKBLUE_CL: Color = 32;
pub const Color_COLOR_PINK_CL: Color = 33;
pub const Color_COLOR_YELLOW_CL: Color = 34;
pub const Color_COLOR_TURQUOISE_CL: Color = 35;
pub const Color_COLOR_VIOLET_CL: Color = 36;
pub const Color_COLOR_DARKRED_CL: Color = 37;
pub const Color_COLOR_TEAL_CL: Color = 38;
pub const Color_COLOR_BLUE_CL: Color = 39;
pub const Color_COLOR_SKYBLUE: Color = 40;
pub const Color_COLOR_LIGHTTURQUOISE: Color = 41;
pub const Color_COLOR_LIGHTGREEN: Color = 42;
pub const Color_COLOR_LIGHTYELLOW: Color = 43;
pub const Color_COLOR_PALEBLUE: Color = 44;
pub const Color_COLOR_ROSE: Color = 45;
pub const Color_COLOR_LAVENDER: Color = 46;
pub const Color_COLOR_TAN: Color = 47;
pub const Color_COLOR_LIGHTBLUE: Color = 48;
pub const Color_COLOR_AQUA: Color = 49;
pub const Color_COLOR_LIME: Color = 50;
pub const Color_COLOR_GOLD: Color = 51;
pub const Color_COLOR_LIGHTORANGE: Color = 52;
pub const Color_COLOR_ORANGE: Color = 53;
pub const Color_COLOR_BLUEGRAY: Color = 54;
pub const Color_COLOR_GRAY40: Color = 55;
pub const Color_COLOR_DARKTEAL: Color = 56;
pub const Color_COLOR_SEAGREEN: Color = 57;
pub const Color_COLOR_DARKGREEN: Color = 58;
pub const Color_COLOR_OLIVEGREEN: Color = 59;
pub const Color_COLOR_BROWN: Color = 60;
pub const Color_COLOR_PLUM: Color = 61;
pub const Color_COLOR_INDIGO: Color = 62;
pub const Color_COLOR_GRAY80: Color = 63;
pub const Color_COLOR_DEFAULT_FOREGROUND: Color = 64;
pub const Color_COLOR_DEFAULT_BACKGROUND: Color = 65;
pub const Color_COLOR_TOOLTIP: Color = 81;
pub const Color_COLOR_NONE: Color = 127;
pub const Color_COLOR_AUTO: Color = 32767;
pub type Color = ::std::os::raw::c_int;
pub const NumFormat_NUMFORMAT_GENERAL: NumFormat = 0;
pub const NumFormat_NUMFORMAT_NUMBER: NumFormat = 1;
pub const NumFormat_NUMFORMAT_NUMBER_D2: NumFormat = 2;
pub const NumFormat_NUMFORMAT_NUMBER_SEP: NumFormat = 3;
pub const NumFormat_NUMFORMAT_NUMBER_SEP_D2: NumFormat = 4;
pub const NumFormat_NUMFORMAT_CURRENCY_NEGBRA: NumFormat = 5;
pub const NumFormat_NUMFORMAT_CURRENCY_NEGBRARED: NumFormat = 6;
pub const NumFormat_NUMFORMAT_CURRENCY_D2_NEGBRA: NumFormat = 7;
pub const NumFormat_NUMFORMAT_CURRENCY_D2_NEGBRARED: NumFormat = 8;
pub const NumFormat_NUMFORMAT_PERCENT: NumFormat = 9;
pub const NumFormat_NUMFORMAT_PERCENT_D2: NumFormat = 10;
pub const NumFormat_NUMFORMAT_SCIENTIFIC_D2: NumFormat = 11;
pub const NumFormat_NUMFORMAT_FRACTION_ONEDIG: NumFormat = 12;
pub const NumFormat_NUMFORMAT_FRACTION_TWODIG: NumFormat = 13;
pub const NumFormat_NUMFORMAT_DATE: NumFormat = 14;
pub const NumFormat_NUMFORMAT_CUSTOM_D_MON_YY: NumFormat = 15;
pub const NumFormat_NUMFORMAT_CUSTOM_D_MON: NumFormat = 16;
pub const NumFormat_NUMFORMAT_CUSTOM_MON_YY: NumFormat = 17;
pub const NumFormat_NUMFORMAT_CUSTOM_HMM_AM: NumFormat = 18;
pub const NumFormat_NUMFORMAT_CUSTOM_HMMSS_AM: NumFormat = 19;
pub const NumFormat_NUMFORMAT_CUSTOM_HMM: NumFormat = 20;
pub const NumFormat_NUMFORMAT_CUSTOM_HMMSS: NumFormat = 21;
pub const NumFormat_NUMFORMAT_CUSTOM_MDYYYY_HMM: NumFormat = 22;
pub const NumFormat_NUMFORMAT_NUMBER_SEP_NEGBRA: NumFormat = 37;
pub const NumFormat_NUMFORMAT_NUMBER_SEP_NEGBRARED: NumFormat = 38;
pub const NumFormat_NUMFORMAT_NUMBER_D2_SEP_NEGBRA: NumFormat = 39;
pub const NumFormat_NUMFORMAT_NUMBER_D2_SEP_NEGBRARED: NumFormat = 40;
pub const NumFormat_NUMFORMAT_ACCOUNT: NumFormat = 41;
pub const NumFormat_NUMFORMAT_ACCOUNTCUR: NumFormat = 42;
pub const NumFormat_NUMFORMAT_ACCOUNT_D2: NumFormat = 43;
pub const NumFormat_NUMFORMAT_ACCOUNT_D2_CUR: NumFormat = 44;
pub const NumFormat_NUMFORMAT_CUSTOM_MMSS: NumFormat = 45;
pub const NumFormat_NUMFORMAT_CUSTOM_H0MMSS: NumFormat = 46;
pub const NumFormat_NUMFORMAT_CUSTOM_MMSS0: NumFormat = 47;
pub const NumFormat_NUMFORMAT_CUSTOM_000P0E_PLUS0: NumFormat = 48;
pub const NumFormat_NUMFORMAT_TEXT: NumFormat = 49;
pub type NumFormat = ::std::os::raw::c_int;
pub const AlignH_ALIGNH_GENERAL: AlignH = 0;
pub const AlignH_ALIGNH_LEFT: AlignH = 1;
pub const AlignH_ALIGNH_CENTER: AlignH = 2;
pub const AlignH_ALIGNH_RIGHT: AlignH = 3;
pub const AlignH_ALIGNH_FILL: AlignH = 4;
pub const AlignH_ALIGNH_JUSTIFY: AlignH = 5;
pub const AlignH_ALIGNH_MERGE: AlignH = 6;
pub const AlignH_ALIGNH_DISTRIBUTED: AlignH = 7;
pub type AlignH = ::std::os::raw::c_int;
pub const AlignV_ALIGNV_TOP: AlignV = 0;
pub const AlignV_ALIGNV_CENTER: AlignV = 1;
pub const AlignV_ALIGNV_BOTTOM: AlignV = 2;
pub const AlignV_ALIGNV_JUSTIFY: AlignV = 3;
pub const AlignV_ALIGNV_DISTRIBUTED: AlignV = 4;
pub type AlignV = ::std::os::raw::c_int;
pub const BorderStyle_BORDERSTYLE_NONE: BorderStyle = 0;
pub const BorderStyle_BORDERSTYLE_THIN: BorderStyle = 1;
pub const BorderStyle_BORDERSTYLE_MEDIUM: BorderStyle = 2;
pub const BorderStyle_BORDERSTYLE_DASHED: BorderStyle = 3;
pub const BorderStyle_BORDERSTYLE_DOTTED: BorderStyle = 4;
pub const BorderStyle_BORDERSTYLE_THICK: BorderStyle = 5;
pub const BorderStyle_BORDERSTYLE_DOUBLE: BorderStyle = 6;
pub const BorderStyle_BORDERSTYLE_HAIR: BorderStyle = 7;
pub const BorderStyle_BORDERSTYLE_MEDIUMDASHED: BorderStyle = 8;
pub const BorderStyle_BORDERSTYLE_DASHDOT: BorderStyle = 9;
pub const BorderStyle_BORDERSTYLE_MEDIUMDASHDOT: BorderStyle = 10;
pub const BorderStyle_BORDERSTYLE_DASHDOTDOT: BorderStyle = 11;
pub const BorderStyle_BORDERSTYLE_MEDIUMDASHDOTDOT: BorderStyle = 12;
pub const BorderStyle_BORDERSTYLE_SLANTDASHDOT: BorderStyle = 13;
pub type BorderStyle = ::std::os::raw::c_int;
pub const BorderDiagonal_BORDERDIAGONAL_NONE: BorderDiagonal = 0;
pub const BorderDiagonal_BORDERDIAGONAL_DOWN: BorderDiagonal = 1;
pub const BorderDiagonal_BORDERDIAGONAL_UP: BorderDiagonal = 2;
pub const BorderDiagonal_BORDERDIAGONAL_BOTH: BorderDiagonal = 3;
pub type BorderDiagonal = ::std::os::raw::c_int;
pub const FillPattern_FILLPATTERN_NONE: FillPattern = 0;
pub const FillPattern_FILLPATTERN_SOLID: FillPattern = 1;
pub const FillPattern_FILLPATTERN_GRAY50: FillPattern = 2;
pub const FillPattern_FILLPATTERN_GRAY75: FillPattern = 3;
pub const FillPattern_FILLPATTERN_GRAY25: FillPattern = 4;
pub const FillPattern_FILLPATTERN_HORSTRIPE: FillPattern = 5;
pub const FillPattern_FILLPATTERN_VERSTRIPE: FillPattern = 6;
pub const FillPattern_FILLPATTERN_REVDIAGSTRIPE: FillPattern = 7;
pub const FillPattern_FILLPATTERN_DIAGSTRIPE: FillPattern = 8;
pub const FillPattern_FILLPATTERN_DIAGCROSSHATCH: FillPattern = 9;
pub const FillPattern_FILLPATTERN_THICKDIAGCROSSHATCH: FillPattern = 10;
pub const FillPattern_FILLPATTERN_THINHORSTRIPE: FillPattern = 11;
pub const FillPattern_FILLPATTERN_THINVERSTRIPE: FillPattern = 12;
pub const FillPattern_FILLPATTERN_THINREVDIAGSTRIPE: FillPattern = 13;
pub const FillPattern_FILLPATTERN_THINDIAGSTRIPE: FillPattern = 14;
pub const FillPattern_FILLPATTERN_THINHORCROSSHATCH: FillPattern = 15;
pub const FillPattern_FILLPATTERN_THINDIAGCROSSHATCH: FillPattern = 16;
pub const FillPattern_FILLPATTERN_GRAY12P5: FillPattern = 17;
pub const FillPattern_FILLPATTERN_GRAY6P25: FillPattern = 18;
pub type FillPattern = ::std::os::raw::c_int;
pub const Script_SCRIPT_NORMAL: Script = 0;
pub const Script_SCRIPT_SUPER: Script = 1;
pub const Script_SCRIPT_SUB: Script = 2;
pub type Script = ::std::os::raw::c_int;
pub const Underline_UNDERLINE_NONE: Underline = 0;
pub const Underline_UNDERLINE_SINGLE: Underline = 1;
pub const Underline_UNDERLINE_DOUBLE: Underline = 2;
pub const Underline_UNDERLINE_SINGLEACC: Underline = 33;
pub const Underline_UNDERLINE_DOUBLEACC: Underline = 34;
pub type Underline = ::std::os::raw::c_int;
pub const Paper_PAPER_DEFAULT: Paper = 0;
pub const Paper_PAPER_LETTER: Paper = 1;
pub const Paper_PAPER_LETTERSMALL: Paper = 2;
pub const Paper_PAPER_TABLOID: Paper = 3;
pub const Paper_PAPER_LEDGER: Paper = 4;
pub const Paper_PAPER_LEGAL: Paper = 5;
pub const Paper_PAPER_STATEMENT: Paper = 6;
pub const Paper_PAPER_EXECUTIVE: Paper = 7;
pub const Paper_PAPER_A3: Paper = 8;
pub const Paper_PAPER_A4: Paper = 9;
pub const Paper_PAPER_A4SMALL: Paper = 10;
pub const Paper_PAPER_A5: Paper = 11;
pub const Paper_PAPER_B4: Paper = 12;
pub const Paper_PAPER_B5: Paper = 13;
pub const Paper_PAPER_FOLIO: Paper = 14;
pub const Paper_PAPER_QUATRO: Paper = 15;
pub const Paper_PAPER_10x14: Paper = 16;
pub const Paper_PAPER_10x17: Paper = 17;
pub const Paper_PAPER_NOTE: Paper = 18;
pub const Paper_PAPER_ENVELOPE_9: Paper = 19;
pub const Paper_PAPER_ENVELOPE_10: Paper = 20;
pub const Paper_PAPER_ENVELOPE_11: Paper = 21;
pub const Paper_PAPER_ENVELOPE_12: Paper = 22;
pub const Paper_PAPER_ENVELOPE_14: Paper = 23;
pub const Paper_PAPER_C_SIZE: Paper = 24;
pub const Paper_PAPER_D_SIZE: Paper = 25;
pub const Paper_PAPER_E_SIZE: Paper = 26;
pub const Paper_PAPER_ENVELOPE_DL: Paper = 27;
pub const Paper_PAPER_ENVELOPE_C5: Paper = 28;
pub const Paper_PAPER_ENVELOPE_C3: Paper = 29;
pub const Paper_PAPER_ENVELOPE_C4: Paper = 30;
pub const Paper_PAPER_ENVELOPE_C6: Paper = 31;
pub const Paper_PAPER_ENVELOPE_C65: Paper = 32;
pub const Paper_PAPER_ENVELOPE_B4: Paper = 33;
pub const Paper_PAPER_ENVELOPE_B5: Paper = 34;
pub const Paper_PAPER_ENVELOPE_B6: Paper = 35;
pub const Paper_PAPER_ENVELOPE: Paper = 36;
pub const Paper_PAPER_ENVELOPE_MONARCH: Paper = 37;
pub const Paper_PAPER_US_ENVELOPE: Paper = 38;
pub const Paper_PAPER_FANFOLD: Paper = 39;
pub const Paper_PAPER_GERMAN_STD_FANFOLD: Paper = 40;
pub const Paper_PAPER_GERMAN_LEGAL_FANFOLD: Paper = 41;
pub const Paper_PAPER_B4_ISO: Paper = 42;
pub const Paper_PAPER_JAPANESE_POSTCARD: Paper = 43;
pub const Paper_PAPER_9x11: Paper = 44;
pub const Paper_PAPER_10x11: Paper = 45;
pub const Paper_PAPER_15x11: Paper = 46;
pub const Paper_PAPER_ENVELOPE_INVITE: Paper = 47;
pub const Paper_PAPER_US_LETTER_EXTRA: Paper = 50;
pub const Paper_PAPER_US_LEGAL_EXTRA: Paper = 51;
pub const Paper_PAPER_US_TABLOID_EXTRA: Paper = 52;
pub const Paper_PAPER_A4_EXTRA: Paper = 53;
pub const Paper_PAPER_LETTER_TRANSVERSE: Paper = 54;
pub const Paper_PAPER_A4_TRANSVERSE: Paper = 55;
pub const Paper_PAPER_LETTER_EXTRA_TRANSVERSE: Paper = 56;
pub const Paper_PAPER_SUPERA: Paper = 57;
pub const Paper_PAPER_SUPERB: Paper = 58;
pub const Paper_PAPER_US_LETTER_PLUS: Paper = 59;
pub const Paper_PAPER_A4_PLUS: Paper = 60;
pub const Paper_PAPER_A5_TRANSVERSE: Paper = 61;
pub const Paper_PAPER_B5_TRANSVERSE: Paper = 62;
pub const Paper_PAPER_A3_EXTRA: Paper = 63;
pub const Paper_PAPER_A5_EXTRA: Paper = 64;
pub const Paper_PAPER_B5_EXTRA: Paper = 65;
pub const Paper_PAPER_A2: Paper = 66;
pub const Paper_PAPER_A3_TRANSVERSE: Paper = 67;
pub const Paper_PAPER_A3_EXTRA_TRANSVERSE: Paper = 68;
pub const Paper_PAPER_JAPANESE_DOUBLE_POSTCARD: Paper = 69;
pub const Paper_PAPER_A6: Paper = 70;
pub const Paper_PAPER_JAPANESE_ENVELOPE_KAKU2: Paper = 71;
pub const Paper_PAPER_JAPANESE_ENVELOPE_KAKU3: Paper = 72;
pub const Paper_PAPER_JAPANESE_ENVELOPE_CHOU3: Paper = 73;
pub const Paper_PAPER_JAPANESE_ENVELOPE_CHOU4: Paper = 74;
pub const Paper_PAPER_LETTER_ROTATED: Paper = 75;
pub const Paper_PAPER_A3_ROTATED: Paper = 76;
pub const Paper_PAPER_A4_ROTATED: Paper = 77;
pub const Paper_PAPER_A5_ROTATED: Paper = 78;
pub const Paper_PAPER_B4_ROTATED: Paper = 79;
pub const Paper_PAPER_B5_ROTATED: Paper = 80;
pub const Paper_PAPER_JAPANESE_POSTCARD_ROTATED: Paper = 81;
pub const Paper_PAPER_DOUBLE_JAPANESE_POSTCARD_ROTATED: Paper = 82;
pub const Paper_PAPER_A6_ROTATED: Paper = 83;
pub const Paper_PAPER_JAPANESE_ENVELOPE_KAKU2_ROTATED: Paper = 84;
pub const Paper_PAPER_JAPANESE_ENVELOPE_KAKU3_ROTATED: Paper = 85;
pub const Paper_PAPER_JAPANESE_ENVELOPE_CHOU3_ROTATED: Paper = 86;
pub const Paper_PAPER_JAPANESE_ENVELOPE_CHOU4_ROTATED: Paper = 87;
pub const Paper_PAPER_B6: Paper = 88;
pub const Paper_PAPER_B6_ROTATED: Paper = 89;
pub const Paper_PAPER_12x11: Paper = 90;
pub const Paper_PAPER_JAPANESE_ENVELOPE_YOU4: Paper = 91;
pub const Paper_PAPER_JAPANESE_ENVELOPE_YOU4_ROTATED: Paper = 92;
pub const Paper_PAPER_PRC16K: Paper = 93;
pub const Paper_PAPER_PRC32K: Paper = 94;
pub const Paper_PAPER_PRC32K_BIG: Paper = 95;
pub const Paper_PAPER_PRC_ENVELOPE1: Paper = 96;
pub const Paper_PAPER_PRC_ENVELOPE2: Paper = 97;
pub const Paper_PAPER_PRC_ENVELOPE3: Paper = 98;
pub const Paper_PAPER_PRC_ENVELOPE4: Paper = 99;
pub const Paper_PAPER_PRC_ENVELOPE5: Paper = 100;
pub const Paper_PAPER_PRC_ENVELOPE6: Paper = 101;
pub const Paper_PAPER_PRC_ENVELOPE7: Paper = 102;
pub const Paper_PAPER_PRC_ENVELOPE8: Paper = 103;
pub const Paper_PAPER_PRC_ENVELOPE9: Paper = 104;
pub const Paper_PAPER_PRC_ENVELOPE10: Paper = 105;
pub const Paper_PAPER_PRC16K_ROTATED: Paper = 106;
pub const Paper_PAPER_PRC32K_ROTATED: Paper = 107;
pub const Paper_PAPER_PRC32KBIG_ROTATED: Paper = 108;
pub const Paper_PAPER_PRC_ENVELOPE1_ROTATED: Paper = 109;
pub const Paper_PAPER_PRC_ENVELOPE2_ROTATED: Paper = 110;
pub const Paper_PAPER_PRC_ENVELOPE3_ROTATED: Paper = 111;
pub const Paper_PAPER_PRC_ENVELOPE4_ROTATED: Paper = 112;
pub const Paper_PAPER_PRC_ENVELOPE5_ROTATED: Paper = 113;
pub const Paper_PAPER_PRC_ENVELOPE6_ROTATED: Paper = 114;
pub const Paper_PAPER_PRC_ENVELOPE7_ROTATED: Paper = 115;
pub const Paper_PAPER_PRC_ENVELOPE8_ROTATED: Paper = 116;
pub const Paper_PAPER_PRC_ENVELOPE9_ROTATED: Paper = 117;
pub const Paper_PAPER_PRC_ENVELOPE10_ROTATED: Paper = 118;
pub type Paper = ::std::os::raw::c_int;
pub const SheetType_SHEETTYPE_SHEET: SheetType = 0;
pub const SheetType_SHEETTYPE_CHART: SheetType = 1;
pub const SheetType_SHEETTYPE_UNKNOWN: SheetType = 2;
pub type SheetType = ::std::os::raw::c_int;
pub const CellType_CELLTYPE_EMPTY: CellType = 0;
pub const CellType_CELLTYPE_NUMBER: CellType = 1;
pub const CellType_CELLTYPE_STRING: CellType = 2;
pub const CellType_CELLTYPE_BOOLEAN: CellType = 3;
pub const CellType_CELLTYPE_BLANK: CellType = 4;
pub const CellType_CELLTYPE_ERROR: CellType = 5;
pub const CellType_CELLTYPE_STRICTDATE: CellType = 6;
pub type CellType = ::std::os::raw::c_int;
pub const ErrorType_ERRORTYPE_NULL: ErrorType = 0;
pub const ErrorType_ERRORTYPE_DIV_0: ErrorType = 7;
pub const ErrorType_ERRORTYPE_VALUE: ErrorType = 15;
pub const ErrorType_ERRORTYPE_REF: ErrorType = 23;
pub const ErrorType_ERRORTYPE_NAME: ErrorType = 29;
pub const ErrorType_ERRORTYPE_NUM: ErrorType = 36;
pub const ErrorType_ERRORTYPE_NA: ErrorType = 42;
pub const ErrorType_ERRORTYPE_NOERROR: ErrorType = 255;
pub type ErrorType = ::std::os::raw::c_int;
pub const PictureType_PICTURETYPE_PNG: PictureType = 0;
pub const PictureType_PICTURETYPE_JPEG: PictureType = 1;
pub const PictureType_PICTURETYPE_GIF: PictureType = 2;
pub const PictureType_PICTURETYPE_WMF: PictureType = 3;
pub const PictureType_PICTURETYPE_DIB: PictureType = 4;
pub const PictureType_PICTURETYPE_EMF: PictureType = 5;
pub const PictureType_PICTURETYPE_PICT: PictureType = 6;
pub const PictureType_PICTURETYPE_TIFF: PictureType = 7;
pub const PictureType_PICTURETYPE_ERROR: PictureType = 255;
pub type PictureType = ::std::os::raw::c_int;
pub const SheetState_SHEETSTATE_VISIBLE: SheetState = 0;
pub const SheetState_SHEETSTATE_HIDDEN: SheetState = 1;
pub const SheetState_SHEETSTATE_VERYHIDDEN: SheetState = 2;
pub type SheetState = ::std::os::raw::c_int;
pub const Scope_SCOPE_UNDEFINED: Scope = -2;
pub const Scope_SCOPE_WORKBOOK: Scope = -1;
pub type Scope = ::std::os::raw::c_int;
pub const Position_POSITION_MOVE_AND_SIZE: Position = 0;
pub const Position_POSITION_ONLY_MOVE: Position = 1;
pub const Position_POSITION_ABSOLUTE: Position = 2;
pub type Position = ::std::os::raw::c_int;
pub const Operator_OPERATOR_EQUAL: Operator = 0;
pub const Operator_OPERATOR_GREATER_THAN: Operator = 1;
pub const Operator_OPERATOR_GREATER_THAN_OR_EQUAL: Operator = 2;
pub const Operator_OPERATOR_LESS_THAN: Operator = 3;
pub const Operator_OPERATOR_LESS_THAN_OR_EQUAL: Operator = 4;
pub const Operator_OPERATOR_NOT_EQUAL: Operator = 5;
pub type Operator = ::std::os::raw::c_int;
pub const Filter_FILTER_VALUE: Filter = 0;
pub const Filter_FILTER_TOP10: Filter = 1;
pub const Filter_FILTER_CUSTOM: Filter = 2;
pub const Filter_FILTER_DYNAMIC: Filter = 3;
pub const Filter_FILTER_COLOR: Filter = 4;
pub const Filter_FILTER_ICON: Filter = 5;
pub const Filter_FILTER_EXT: Filter = 6;
pub const Filter_FILTER_NOT_SET: Filter = 7;
pub type Filter = ::std::os::raw::c_int;
pub const IgnoredError_IERR_NO_ERROR: IgnoredError = 0;
pub const IgnoredError_IERR_EVAL_ERROR: IgnoredError = 1;
pub const IgnoredError_IERR_EMPTY_CELLREF: IgnoredError = 2;
pub const IgnoredError_IERR_NUMBER_STORED_AS_TEXT: IgnoredError = 4;
pub const IgnoredError_IERR_INCONSIST_RANGE: IgnoredError = 8;
pub const IgnoredError_IERR_INCONSIST_FMLA: IgnoredError = 16;
pub const IgnoredError_IERR_TWODIG_TEXTYEAR: IgnoredError = 32;
pub const IgnoredError_IERR_UNLOCK_FMLA: IgnoredError = 64;
pub const IgnoredError_IERR_DATA_VALIDATION: IgnoredError = 128;
pub type IgnoredError = ::std::os::raw::c_int;
pub const EnhancedProtection_PROT_DEFAULT: EnhancedProtection = -1;
pub const EnhancedProtection_PROT_ALL: EnhancedProtection = 0;
pub const EnhancedProtection_PROT_OBJECTS: EnhancedProtection = 1;
pub const EnhancedProtection_PROT_SCENARIOS: EnhancedProtection = 2;
pub const EnhancedProtection_PROT_FORMAT_CELLS: EnhancedProtection = 4;
pub const EnhancedProtection_PROT_FORMAT_COLUMNS: EnhancedProtection = 8;
pub const EnhancedProtection_PROT_FORMAT_ROWS: EnhancedProtection = 16;
pub const EnhancedProtection_PROT_INSERT_COLUMNS: EnhancedProtection = 32;
pub const EnhancedProtection_PROT_INSERT_ROWS: EnhancedProtection = 64;
pub const EnhancedProtection_PROT_INSERT_HYPERLINKS: EnhancedProtection = 128;
pub const EnhancedProtection_PROT_DELETE_COLUMNS: EnhancedProtection = 256;
pub const EnhancedProtection_PROT_DELETE_ROWS: EnhancedProtection = 512;
pub const EnhancedProtection_PROT_SEL_LOCKED_CELLS: EnhancedProtection = 1024;
pub const EnhancedProtection_PROT_SORT: EnhancedProtection = 2048;
pub const EnhancedProtection_PROT_AUTOFILTER: EnhancedProtection = 4096;
pub const EnhancedProtection_PROT_PIVOTTABLES: EnhancedProtection = 8192;
pub const EnhancedProtection_PROT_SEL_UNLOCKED_CELLS: EnhancedProtection = 16384;
pub type EnhancedProtection = ::std::os::raw::c_int;
pub const DataValidationType_VALIDATION_TYPE_NONE: DataValidationType = 0;
pub const DataValidationType_VALIDATION_TYPE_WHOLE: DataValidationType = 1;
pub const DataValidationType_VALIDATION_TYPE_DECIMAL: DataValidationType = 2;
pub const DataValidationType_VALIDATION_TYPE_LIST: DataValidationType = 3;
pub const DataValidationType_VALIDATION_TYPE_DATE: DataValidationType = 4;
pub const DataValidationType_VALIDATION_TYPE_TIME: DataValidationType = 5;
pub const DataValidationType_VALIDATION_TYPE_TEXTLENGTH: DataValidationType = 6;
pub const DataValidationType_VALIDATION_TYPE_CUSTOM: DataValidationType = 7;
pub type DataValidationType = ::std::os::raw::c_int;
pub const DataValidationOperator_VALIDATION_OP_BETWEEN: DataValidationOperator = 0;
pub const DataValidationOperator_VALIDATION_OP_NOTBETWEEN: DataValidationOperator = 1;
pub const DataValidationOperator_VALIDATION_OP_EQUAL: DataValidationOperator = 2;
pub const DataValidationOperator_VALIDATION_OP_NOTEQUAL: DataValidationOperator = 3;
pub const DataValidationOperator_VALIDATION_OP_LESSTHAN: DataValidationOperator = 4;
pub const DataValidationOperator_VALIDATION_OP_LESSTHANOREQUAL: DataValidationOperator = 5;
pub const DataValidationOperator_VALIDATION_OP_GREATERTHAN: DataValidationOperator = 6;
pub const DataValidationOperator_VALIDATION_OP_GREATERTHANOREQUAL: DataValidationOperator = 7;
pub type DataValidationOperator = ::std::os::raw::c_int;
pub const DataValidationErrorStyle_VALIDATION_ERRSTYLE_STOP: DataValidationErrorStyle = 0;
pub const DataValidationErrorStyle_VALIDATION_ERRSTYLE_WARNING: DataValidationErrorStyle = 1;
pub const DataValidationErrorStyle_VALIDATION_ERRSTYLE_INFORMATION: DataValidationErrorStyle = 2;
pub type DataValidationErrorStyle = ::std::os::raw::c_int;
pub const CalcModeType_CALCMODE_MANUAL: CalcModeType = 0;
pub const CalcModeType_CALCMODE_AUTO: CalcModeType = 1;
pub const CalcModeType_CALCMODE_AUTONOTABLE: CalcModeType = 2;
pub type CalcModeType = ::std::os::raw::c_int;
pub const CheckedType_CHECKEDTYPE_UNCHECKED: CheckedType = 0;
pub const CheckedType_CHECKEDTYPE_CHECKED: CheckedType = 1;
pub const CheckedType_CHECKEDTYPE_MIXED: CheckedType = 2;
pub type CheckedType = ::std::os::raw::c_int;
pub const ObjectType_OBJECT_UNKNOWN: ObjectType = 0;
pub const ObjectType_OBJECT_BUTTON: ObjectType = 1;
pub const ObjectType_OBJECT_CHECKBOX: ObjectType = 2;
pub const ObjectType_OBJECT_DROP: ObjectType = 3;
pub const ObjectType_OBJECT_GBOX: ObjectType = 4;
pub const ObjectType_OBJECT_LABEL: ObjectType = 5;
pub const ObjectType_OBJECT_LIST: ObjectType = 6;
pub const ObjectType_OBJECT_RADIO: ObjectType = 7;
pub const ObjectType_OBJECT_SCROLL: ObjectType = 8;
pub const ObjectType_OBJECT_SPIN: ObjectType = 9;
pub const ObjectType_OBJECT_EDITBOX: ObjectType = 10;
pub const ObjectType_OBJECT_DIALOG: ObjectType = 11;
pub type ObjectType = ::std::os::raw::c_int;
pub const CFormatType_CFORMAT_BEGINWITH: CFormatType = 0;
pub const CFormatType_CFORMAT_CONTAINSBLANKS: CFormatType = 1;
pub const CFormatType_CFORMAT_CONTAINSERRORS: CFormatType = 2;
pub const CFormatType_CFORMAT_CONTAINSTEXT: CFormatType = 3;
pub const CFormatType_CFORMAT_DUPLICATEVALUES: CFormatType = 4;
pub const CFormatType_CFORMAT_ENDSWITH: CFormatType = 5;
pub const CFormatType_CFORMAT_EXPRESSION: CFormatType = 6;
pub const CFormatType_CFORMAT_NOTCONTAINSBLANKS: CFormatType = 7;
pub const CFormatType_CFORMAT_NOTCONTAINSERRORS: CFormatType = 8;
pub const CFormatType_CFORMAT_NOTCONTAINSTEXT: CFormatType = 9;
pub const CFormatType_CFORMAT_UNIQUEVALUES: CFormatType = 10;
pub type CFormatType = ::std::os::raw::c_int;
pub const CFormatOperator_CFOPERATOR_LESSTHAN: CFormatOperator = 0;
pub const CFormatOperator_CFOPERATOR_LESSTHANOREQUAL: CFormatOperator = 1;
pub const CFormatOperator_CFOPERATOR_EQUAL: CFormatOperator = 2;
pub const CFormatOperator_CFOPERATOR_NOTEQUAL: CFormatOperator = 3;
pub const CFormatOperator_CFOPERATOR_GREATERTHANOREQUAL: CFormatOperator = 4;
pub const CFormatOperator_CFOPERATOR_GREATERTHAN: CFormatOperator = 5;
pub const CFormatOperator_CFOPERATOR_BETWEEN: CFormatOperator = 6;
pub const CFormatOperator_CFOPERATOR_NOTBETWEEN: CFormatOperator = 7;
pub const CFormatOperator_CFOPERATOR_CONTAINSTEXT: CFormatOperator = 8;
pub const CFormatOperator_CFOPERATOR_NOTCONTAINS: CFormatOperator = 9;
pub const CFormatOperator_CFOPERATOR_BEGINSWITH: CFormatOperator = 10;
pub const CFormatOperator_CFOPERATOR_ENDSWITH: CFormatOperator = 11;
pub type CFormatOperator = ::std::os::raw::c_int;
pub const CFormatTimePeriod_CFTP_LAST7DAYS: CFormatTimePeriod = 0;
pub const CFormatTimePeriod_CFTP_LASTMONTH: CFormatTimePeriod = 1;
pub const CFormatTimePeriod_CFTP_LASTWEEK: CFormatTimePeriod = 2;
pub const CFormatTimePeriod_CFTP_NEXTMONTH: CFormatTimePeriod = 3;
pub const CFormatTimePeriod_CFTP_NEXTWEEK: CFormatTimePeriod = 4;
pub const CFormatTimePeriod_CFTP_THISMONTH: CFormatTimePeriod = 5;
pub const CFormatTimePeriod_CFTP_THISWEEK: CFormatTimePeriod = 6;
pub const CFormatTimePeriod_CFTP_TODAY: CFormatTimePeriod = 7;
pub const CFormatTimePeriod_CFTP_TOMORROW: CFormatTimePeriod = 8;
pub const CFormatTimePeriod_CFTP_YESTERDAY: CFormatTimePeriod = 9;
pub type CFormatTimePeriod = ::std::os::raw::c_int;
pub const CFVOType_CFVO_MIN: CFVOType = 0;
pub const CFVOType_CFVO_MAX: CFVOType = 1;
pub const CFVOType_CFVO_FORMULA: CFVOType = 2;
pub const CFVOType_CFVO_NUMBER: CFVOType = 3;
pub const CFVOType_CFVO_PERCENT: CFVOType = 4;
pub const CFVOType_CFVO_PERCENTILE: CFVOType = 5;
pub type CFVOType = ::std::os::raw::c_int;
pub const CellStyle_CELLSTYLE_NORMAL: CellStyle = 0;
pub const CellStyle_CELLSTYLE_BAD: CellStyle = 1;
pub const CellStyle_CELLSTYLE_GOOD: CellStyle = 2;
pub const CellStyle_CELLSTYLE_NEUTRAL: CellStyle = 3;
pub const CellStyle_CELLSTYLE_CALC: CellStyle = 4;
pub const CellStyle_CELLSTYLE_CHECKCELL: CellStyle = 5;
pub const CellStyle_CELLSTYLE_EXPLANATORY: CellStyle = 6;
pub const CellStyle_CELLSTYLE_INPUT: CellStyle = 7;
pub const CellStyle_CELLSTYLE_OUTPUT: CellStyle = 8;
pub const CellStyle_CELLSTYLE_HYPERLINK: CellStyle = 9;
pub const CellStyle_CELLSTYLE_LINKEDCELL: CellStyle = 10;
pub const CellStyle_CELLSTYLE_NOTE: CellStyle = 11;
pub const CellStyle_CELLSTYLE_WARNING: CellStyle = 12;
pub const CellStyle_CELLSTYLE_TITLE: CellStyle = 13;
pub const CellStyle_CELLSTYLE_HEADING1: CellStyle = 14;
pub const CellStyle_CELLSTYLE_HEADING2: CellStyle = 15;
pub const CellStyle_CELLSTYLE_HEADING3: CellStyle = 16;
pub const CellStyle_CELLSTYLE_HEADING4: CellStyle = 17;
pub const CellStyle_CELLSTYLE_TOTAL: CellStyle = 18;
pub const CellStyle_CELLSTYLE_20ACCENT1: CellStyle = 19;
pub const CellStyle_CELLSTYLE_40ACCENT1: CellStyle = 20;
pub const CellStyle_CELLSTYLE_60ACCENT1: CellStyle = 21;
pub const CellStyle_CELLSTYLE_ACCENT1: CellStyle = 22;
pub const CellStyle_CELLSTYLE_20ACCENT2: CellStyle = 23;
pub const CellStyle_CELLSTYLE_40ACCENT2: CellStyle = 24;
pub const CellStyle_CELLSTYLE_60ACCENT2: CellStyle = 25;
pub const CellStyle_CELLSTYLE_ACCENT2: CellStyle = 26;
pub const CellStyle_CELLSTYLE_20ACCENT3: CellStyle = 27;
pub const CellStyle_CELLSTYLE_40ACCENT3: CellStyle = 28;
pub const CellStyle_CELLSTYLE_60ACCENT3: CellStyle = 29;
pub const CellStyle_CELLSTYLE_ACCENT3: CellStyle = 30;
pub const CellStyle_CELLSTYLE_20ACCENT4: CellStyle = 31;
pub const CellStyle_CELLSTYLE_40ACCENT4: CellStyle = 32;
pub const CellStyle_CELLSTYLE_60ACCENT4: CellStyle = 33;
pub const CellStyle_CELLSTYLE_ACCENT4: CellStyle = 34;
pub const CellStyle_CELLSTYLE_20ACCENT5: CellStyle = 35;
pub const CellStyle_CELLSTYLE_40ACCENT5: CellStyle = 36;
pub const CellStyle_CELLSTYLE_60ACCENT5: CellStyle = 37;
pub const CellStyle_CELLSTYLE_ACCENT5: CellStyle = 38;
pub const CellStyle_CELLSTYLE_20ACCENT6: CellStyle = 39;
pub const CellStyle_CELLSTYLE_40ACCENT6: CellStyle = 40;
pub const CellStyle_CELLSTYLE_60ACCENT6: CellStyle = 41;
pub const CellStyle_CELLSTYLE_ACCENT6: CellStyle = 42;
pub const CellStyle_CELLSTYLE_COMMA: CellStyle = 43;
pub const CellStyle_CELLSTYLE_COMMA0: CellStyle = 44;
pub const CellStyle_CELLSTYLE_CURRENCY: CellStyle = 45;
pub const CellStyle_CELLSTYLE_CURRENCY0: CellStyle = 46;
pub const CellStyle_CELLSTYLE_PERCENT: CellStyle = 47;
pub type CellStyle = ::std::os::raw::c_int;
extern "C" {
    pub fn xlSheetCellTypeW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetIsFormulaW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetCellFormatW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> FormatHandle;
}
extern "C" {
    pub fn xlSheetSetCellFormatW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: FormatHandle,
    );
}
extern "C" {
    pub fn xlSheetReadStrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: *mut FormatHandle,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetWriteStrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        value: *const wchar_t,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteStrAsNumW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        value: *const wchar_t,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadRichStrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: *mut FormatHandle,
    ) -> RichStringHandle;
}
extern "C" {
    pub fn xlSheetWriteRichStrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        richString: RichStringHandle,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadNumW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: *mut FormatHandle,
    ) -> f64;
}
extern "C" {
    pub fn xlSheetWriteNumW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        value: f64,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadBoolW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: *mut FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteBoolW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadBlankW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: *mut FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteBlankW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadFormulaW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        format: *mut FormatHandle,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetWriteFormulaW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        value: *const wchar_t,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteFormulaNumW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        expr: *const wchar_t,
        value: f64,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteFormulaStrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        expr: *const wchar_t,
        value: *const wchar_t,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteFormulaBoolW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        expr: *const wchar_t,
        value: ::std::os::raw::c_int,
        format: FormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadCommentW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetWriteCommentW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        value: *const wchar_t,
        author: *const wchar_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetRemoveCommentW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetIsDateW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetIsRichStrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetReadErrorW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetWriteErrorW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        error: ::std::os::raw::c_int,
        format: FormatHandle,
    );
}
extern "C" {
    pub fn xlSheetColWidthW(handle: SheetHandle, col: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn xlSheetRowHeightW(handle: SheetHandle, row: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn xlSheetColWidthPxW(
        handle: SheetHandle,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRowHeightPxW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetColW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        width: f64,
        format: FormatHandle,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetColPxW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        widthPx: ::std::os::raw::c_int,
        format: FormatHandle,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetRowW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        height: f64,
        format: FormatHandle,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetRowPxW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        heightPx: ::std::os::raw::c_int,
        format: FormatHandle,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRowHiddenW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetRowHiddenW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetColHiddenW(
        handle: SheetHandle,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetColHiddenW(
        handle: SheetHandle,
        col: ::std::os::raw::c_int,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetDefaultRowHeightW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetSetDefaultRowHeightW(handle: SheetHandle, height: f64);
}
extern "C" {
    pub fn xlSheetGetMergeW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetMergeW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetDelMergeW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetMergeSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetMergeW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetDelMergeByIndexW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetPictureSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGetPictureW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
        rowTop: *mut ::std::os::raw::c_int,
        colLeft: *mut ::std::os::raw::c_int,
        rowBottom: *mut ::std::os::raw::c_int,
        colRight: *mut ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        offset_x: *mut ::std::os::raw::c_int,
        offset_y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRemovePictureByIndexW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPictureW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        pictureId: ::std::os::raw::c_int,
        scale: f64,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetSetPicture2W(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        pictureId: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
        pos: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetRemovePictureW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGetHorPageBreakW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGetHorPageBreakSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGetVerPageBreakW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGetVerPageBreakSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetHorPageBreakW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        pageBreak: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetVerPageBreakW(
        handle: SheetHandle,
        col: ::std::os::raw::c_int,
        pageBreak: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSplitW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetSplitInfoW(
        handle: SheetHandle,
        row: *mut ::std::os::raw::c_int,
        col: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGroupRowsW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        collapsed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGroupColsW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        collapsed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGroupSummaryBelowW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetGroupSummaryBelowW(handle: SheetHandle, below: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetGroupSummaryRightW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetGroupSummaryRightW(handle: SheetHandle, right: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetClearW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetInsertColW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetInsertRowW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRemoveColW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRemoveRowW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetInsertColAndKeepRangesW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetInsertRowAndKeepRangesW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRemoveColAndKeepRangesW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetRemoveRowAndKeepRangesW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetCopyCellW(
        handle: SheetHandle,
        rowSrc: ::std::os::raw::c_int,
        colSrc: ::std::os::raw::c_int,
        rowDst: ::std::os::raw::c_int,
        colDst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetFirstRowW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetLastRowW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetFirstColW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetLastColW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetFirstFilledRowW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetLastFilledRowW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetFirstFilledColW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetLastFilledColW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetDisplayGridlinesW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetDisplayGridlinesW(handle: SheetHandle, show: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetPrintGridlinesW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintGridlinesW(handle: SheetHandle, print: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetZoomW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetZoomW(handle: SheetHandle, zoom: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetPrintZoomW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintZoomW(handle: SheetHandle, zoom: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetGetPrintFitW(
        handle: SheetHandle,
        wPages: *mut ::std::os::raw::c_int,
        hPages: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintFitW(
        handle: SheetHandle,
        wPages: ::std::os::raw::c_int,
        hPages: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetLandscapeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetLandscapeW(handle: SheetHandle, landscape: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetPaperW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPaperW(handle: SheetHandle, paper: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetHeaderW(handle: SheetHandle) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetSetHeaderW(
        handle: SheetHandle,
        header: *const wchar_t,
        margin: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetHeaderMarginW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetFooterW(handle: SheetHandle) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetSetFooterW(
        handle: SheetHandle,
        footer: *const wchar_t,
        margin: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetFooterMarginW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetHCenterW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetHCenterW(handle: SheetHandle, hCenter: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetVCenterW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetVCenterW(handle: SheetHandle, vCenter: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetMarginLeftW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetSetMarginLeftW(handle: SheetHandle, margin: f64);
}
extern "C" {
    pub fn xlSheetMarginRightW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetSetMarginRightW(handle: SheetHandle, margin: f64);
}
extern "C" {
    pub fn xlSheetMarginTopW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetSetMarginTopW(handle: SheetHandle, margin: f64);
}
extern "C" {
    pub fn xlSheetMarginBottomW(handle: SheetHandle) -> f64;
}
extern "C" {
    pub fn xlSheetSetMarginBottomW(handle: SheetHandle, margin: f64);
}
extern "C" {
    pub fn xlSheetPrintRowColW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintRowColW(handle: SheetHandle, print: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetPrintRepeatRowsW(
        handle: SheetHandle,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintRepeatRowsW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetPrintRepeatColsW(
        handle: SheetHandle,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintRepeatColsW(
        handle: SheetHandle,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetPrintAreaW(
        handle: SheetHandle,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetPrintAreaW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetClearPrintRepeatsW(handle: SheetHandle);
}
extern "C" {
    pub fn xlSheetClearPrintAreaW(handle: SheetHandle);
}
extern "C" {
    pub fn xlSheetGetNamedRangeW(
        handle: SheetHandle,
        name: *const wchar_t,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
        scopeId: ::std::os::raw::c_int,
        hidden: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetNamedRangeW(
        handle: SheetHandle,
        name: *const wchar_t,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        scopeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetDelNamedRangeW(
        handle: SheetHandle,
        name: *const wchar_t,
        scopeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetNamedRangeSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetNamedRangeW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
        scopeId: *mut ::std::os::raw::c_int,
        hidden: *mut ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetGetTableW(
        handle: SheetHandle,
        name: *const wchar_t,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
        headerRowCount: *mut ::std::os::raw::c_int,
        totalsRowCount: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetTableSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetTableW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
        headerRowCount: *mut ::std::os::raw::c_int,
        totalsRowCount: *mut ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetHyperlinkSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetHyperlinkW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetDelHyperlinkW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetAddHyperlinkW(
        handle: SheetHandle,
        hyperlink: *const wchar_t,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetHyperlinkIndexW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetIsAutoFilterW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetAutoFilterW(handle: SheetHandle) -> AutoFilterHandle;
}
extern "C" {
    pub fn xlSheetApplyFilterW(handle: SheetHandle);
}
extern "C" {
    pub fn xlSheetRemoveFilterW(handle: SheetHandle);
}
extern "C" {
    pub fn xlSheetNameW(handle: SheetHandle) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetSetNameW(handle: SheetHandle, name: *const wchar_t);
}
extern "C" {
    pub fn xlSheetProtectW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetProtectW(handle: SheetHandle, protect: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetSetProtectExW(
        handle: SheetHandle,
        protect: ::std::os::raw::c_int,
        password: *const wchar_t,
        enhancedProtection: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetHiddenW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetHiddenW(
        handle: SheetHandle,
        hidden: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetGetTopLeftViewW(
        handle: SheetHandle,
        row: *mut ::std::os::raw::c_int,
        col: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetSetTopLeftViewW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetRightToLeftW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetRightToLeftW(handle: SheetHandle, rightToLeft: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetSetAutoFitAreaW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetAddrToRowColW(
        handle: SheetHandle,
        addr: *const wchar_t,
        row: *mut ::std::os::raw::c_int,
        col: *mut ::std::os::raw::c_int,
        rowRelative: *mut ::std::os::raw::c_int,
        colRelative: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetRowColToAddrW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
        rowRelative: ::std::os::raw::c_int,
        colRelative: ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetTabColorW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetTabColorW(handle: SheetHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlSheetGetTabRgbColorW(
        handle: SheetHandle,
        red: *mut ::std::os::raw::c_int,
        green: *mut ::std::os::raw::c_int,
        blue: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetTabRgbColorW(
        handle: SheetHandle,
        red: ::std::os::raw::c_int,
        green: ::std::os::raw::c_int,
        blue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetAddIgnoredErrorW(
        handle: SheetHandle,
        rowFirst: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        iError: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetAddDataValidationW(
        handle: SheetHandle,
        type_: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        value1: *const wchar_t,
        value2: *const wchar_t,
    );
}
extern "C" {
    pub fn xlSheetAddDataValidationExW(
        handle: SheetHandle,
        type_: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        value1: *const wchar_t,
        value2: *const wchar_t,
        allowBlank: ::std::os::raw::c_int,
        hideDropDown: ::std::os::raw::c_int,
        showInputMessage: ::std::os::raw::c_int,
        showErrorMessage: ::std::os::raw::c_int,
        promptTitle: *const wchar_t,
        prompt: *const wchar_t,
        errorTitle: *const wchar_t,
        error: *const wchar_t,
        errorStyle: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetAddDataValidationDoubleW(
        handle: SheetHandle,
        type_: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        value1: f64,
        value2: f64,
    );
}
extern "C" {
    pub fn xlSheetAddDataValidationDoubleExW(
        handle: SheetHandle,
        type_: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
        value1: f64,
        value2: f64,
        allowBlank: ::std::os::raw::c_int,
        hideDropDown: ::std::os::raw::c_int,
        showInputMessage: ::std::os::raw::c_int,
        showErrorMessage: ::std::os::raw::c_int,
        promptTitle: *const wchar_t,
        prompt: *const wchar_t,
        errorTitle: *const wchar_t,
        error: *const wchar_t,
        errorStyle: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetRemoveDataValidationsW(handle: SheetHandle);
}
extern "C" {
    pub fn xlSheetFormControlSizeW(handle: SheetHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetFormControlW(
        handle: SheetHandle,
        index: ::std::os::raw::c_int,
    ) -> FormControlHandle;
}
extern "C" {
    pub fn xlSheetAddConditionalFormattingW(handle: SheetHandle) -> ConditionalFormattingHandle;
}
extern "C" {
    pub fn xlSheetGetActiveCellW(
        handle: SheetHandle,
        row: *mut ::std::os::raw::c_int,
        col: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlSheetSetActiveCellW(
        handle: SheetHandle,
        row: ::std::os::raw::c_int,
        col: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlSheetSelectionRangeW(handle: SheetHandle) -> *const wchar_t;
}
extern "C" {
    pub fn xlSheetAddSelectionRangeW(handle: SheetHandle, sqref: *const wchar_t);
}
extern "C" {
    pub fn xlSheetRemoveSelectionW(handle: SheetHandle);
}
extern "C" {
    pub fn xlFormatFontW(handle: FormatHandle) -> FontHandle;
}
extern "C" {
    pub fn xlFormatSetFontW(handle: FormatHandle, fontHandle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatNumFormatW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetNumFormatW(handle: FormatHandle, numFormat: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatAlignHW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetAlignHW(handle: FormatHandle, align: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatAlignVW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetAlignVW(handle: FormatHandle, align: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatWrapW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetWrapW(handle: FormatHandle, wrap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatRotationW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetRotationW(
        handle: FormatHandle,
        rotation: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatIndentW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetIndentW(handle: FormatHandle, indent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatShrinkToFitW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetShrinkToFitW(handle: FormatHandle, shrinkToFit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatSetBorderW(handle: FormatHandle, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatSetBorderColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderLeftW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderLeftW(handle: FormatHandle, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderRightW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderRightW(handle: FormatHandle, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderTopW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderTopW(handle: FormatHandle, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderBottomW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderBottomW(handle: FormatHandle, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderLeftColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderLeftColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderRightColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderRightColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderTopColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderTopColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderBottomColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderBottomColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderDiagonalW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderDiagonalW(handle: FormatHandle, border: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderDiagonalStyleW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderDiagonalStyleW(handle: FormatHandle, style: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatBorderDiagonalColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetBorderDiagonalColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatFillPatternW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetFillPatternW(handle: FormatHandle, pattern: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatPatternForegroundColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetPatternForegroundColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatPatternBackgroundColorW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetPatternBackgroundColorW(handle: FormatHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatLockedW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetLockedW(handle: FormatHandle, locked: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFormatHiddenW(handle: FormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFormatSetHiddenW(handle: FormatHandle, hidden: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontSizeW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetSizeW(handle: FontHandle, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontItalicW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetItalicW(handle: FontHandle, italic: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontStrikeOutW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetStrikeOutW(handle: FontHandle, strikeOut: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontColorW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetColorW(handle: FontHandle, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontBoldW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetBoldW(handle: FontHandle, bold: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontScriptW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetScriptW(handle: FontHandle, script: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontUnderlineW(handle: FontHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFontSetUnderlineW(handle: FontHandle, underline: ::std::os::raw::c_int);
}
extern "C" {
    pub fn xlFontNameW(handle: FontHandle) -> *const wchar_t;
}
extern "C" {
    pub fn xlFontSetNameW(handle: FontHandle, name: *const wchar_t);
}
extern "C" {
    pub fn xlAutoFilterGetRefW(
        handle: AutoFilterHandle,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlAutoFilterSetRefW(
        handle: AutoFilterHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlAutoFilterColumnW(
        handle: AutoFilterHandle,
        colId: ::std::os::raw::c_int,
    ) -> FilterColumnHandle;
}
extern "C" {
    pub fn xlAutoFilterColumnSizeW(handle: AutoFilterHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlAutoFilterColumnByIndexW(
        handle: AutoFilterHandle,
        index: ::std::os::raw::c_int,
    ) -> FilterColumnHandle;
}
extern "C" {
    pub fn xlAutoFilterGetSortRangeW(
        handle: AutoFilterHandle,
        rowFirst: *mut ::std::os::raw::c_int,
        rowLast: *mut ::std::os::raw::c_int,
        colFirst: *mut ::std::os::raw::c_int,
        colLast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlAutoFilterGetSortW(
        handle: AutoFilterHandle,
        columnIndex: *mut ::std::os::raw::c_int,
        descending: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlAutoFilterSetSortW(
        handle: AutoFilterHandle,
        columnIndex: ::std::os::raw::c_int,
        descending: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlAutoFilterAddSortW(
        handle: AutoFilterHandle,
        columnIndex: ::std::os::raw::c_int,
        descending: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFilterColumnIndexW(handle: FilterColumnHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFilterColumnFilterTypeW(handle: FilterColumnHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFilterColumnFilterSizeW(handle: FilterColumnHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFilterColumnFilterW(
        handle: FilterColumnHandle,
        index: ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlFilterColumnAddFilterW(handle: FilterColumnHandle, value: *const wchar_t);
}
extern "C" {
    pub fn xlFilterColumnGetTop10W(
        handle: FilterColumnHandle,
        value: *mut f64,
        top: *mut ::std::os::raw::c_int,
        percent: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFilterColumnSetTop10W(
        handle: FilterColumnHandle,
        value: f64,
        top: ::std::os::raw::c_int,
        percent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlFilterColumnGetCustomFilterW(
        handle: FilterColumnHandle,
        op1: *mut ::std::os::raw::c_int,
        v1: *mut *const wchar_t,
        op2: *mut ::std::os::raw::c_int,
        v2: *mut *const wchar_t,
        andOp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlFilterColumnSetCustomFilterW(
        handle: FilterColumnHandle,
        op: ::std::os::raw::c_int,
        val: *const wchar_t,
    );
}
extern "C" {
    pub fn xlFilterColumnSetCustomFilterExW(
        handle: FilterColumnHandle,
        op1: ::std::os::raw::c_int,
        v1: *const wchar_t,
        op2: ::std::os::raw::c_int,
        v2: *const wchar_t,
        andOp: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlFilterColumnClearW(handle: FilterColumnHandle);
}
extern "C" {
    pub fn xlRichStringAddFontW(handle: RichStringHandle, initFont: FontHandle) -> FontHandle;
}
extern "C" {
    pub fn xlRichStringAddTextW(handle: RichStringHandle, text: *const wchar_t, font: FontHandle);
}
extern "C" {
    pub fn xlRichStringGetTextW(
        handle: RichStringHandle,
        index: ::std::os::raw::c_int,
        font: *mut FontHandle,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn xlRichStringTextSizeW(handle: RichStringHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatFontW(handle: ConditionalFormatHandle) -> FontHandle;
}
extern "C" {
    pub fn xlConditionalFormatNumFormatW(handle: ConditionalFormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetNumFormatW(
        handle: ConditionalFormatHandle,
        numFormat: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatCustomNumFormatW(handle: ConditionalFormatHandle) -> *const wchar_t;
}
extern "C" {
    pub fn xlConditionalFormatSetCustomNumFormatW(
        handle: ConditionalFormatHandle,
        customNumFormat: *const wchar_t,
    );
}
extern "C" {
    pub fn xlConditionalFormatSetBorderW(
        handle: ConditionalFormatHandle,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatSetBorderColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderLeftW(handle: ConditionalFormatHandle)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderLeftW(
        handle: ConditionalFormatHandle,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderRightW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderRightW(
        handle: ConditionalFormatHandle,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderTopW(handle: ConditionalFormatHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderTopW(
        handle: ConditionalFormatHandle,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderBottomW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderBottomW(
        handle: ConditionalFormatHandle,
        style: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderLeftColorW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderLeftColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderRightColorW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderRightColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderTopColorW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderTopColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatBorderBottomColorW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetBorderBottomColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatFillPatternW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetFillPatternW(
        handle: ConditionalFormatHandle,
        pattern: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatPatternForegroundColorW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetPatternForegroundColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormatPatternBackgroundColorW(
        handle: ConditionalFormatHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xlConditionalFormatSetPatternBackgroundColorW(
        handle: ConditionalFormatHandle,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddRangeW(
        handle: ConditionalFormattingHandle,
        rowFirst: ::std::os::raw::c_int,
        rowLast: ::std::os::raw::c_int,
        colFirst: ::std::os::raw::c_int,
        colLast: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddRuleW(
        handle: ConditionalFormattingHandle,
        type_: ::std::os::raw::c_int,
        cFormat: ConditionalFormatHandle,
        value: *const wchar_t,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddTopRuleW(
        handle: ConditionalFormattingHandle,
        cFormat: ConditionalFormatHandle,
        value: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        percent: ::std::os::raw::c_int,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddOpNumRuleW(
        handle: ConditionalFormattingHandle,
        op: ::std::os::raw::c_int,
        cFormat: ConditionalFormatHandle,
        value1: f64,
        value2: f64,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddOpStrRuleW(
        handle: ConditionalFormattingHandle,
        op: ::std::os::raw::c_int,
        cFormat: ConditionalFormatHandle,
        value1: *const wchar_t,
        value2: *const wchar_t,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddAboveAverageRuleW(
        handle: ConditionalFormattingHandle,
        cFormat: ConditionalFormatHandle,
        aboveAverage: ::std::os::raw::c_int,
        equalAverage: ::std::os::raw::c_int,
        stdDev: ::std::os::raw::c_int,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAddTimePeriodRuleW(
        handle: ConditionalFormattingHandle,
        cFormat: ConditionalFormatHandle,
        timePeriod: ::std::os::raw::c_int,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAdd2ColorScaleRuleW(
        handle: ConditionalFormattingHandle,
        minColor: ::std::os::raw::c_int,
        maxColor: ::std::os::raw::c_int,
        minType: ::std::os::raw::c_int,
        minValue: f64,
        maxType: ::std::os::raw::c_int,
        maxValue: f64,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAdd2ColorScaleFormulaRuleW(
        handle: ConditionalFormattingHandle,
        minColor: ::std::os::raw::c_int,
        maxColor: ::std::os::raw::c_int,
        minType: ::std::os::raw::c_int,
        minValue: *const wchar_t,
        maxType: ::std::os::raw::c_int,
        maxValue: *const wchar_t,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAdd3ColorScaleRuleW(
        handle: ConditionalFormattingHandle,
        minColor: ::std::os::raw::c_int,
        midColor: ::std::os::raw::c_int,
        maxColor: ::std::os::raw::c_int,
        minType: ::std::os::raw::c_int,
        minValue: f64,
        midType: ::std::os::raw::c_int,
        midValue: f64,
        maxType: ::std::os::raw::c_int,
        maxValue: f64,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xlConditionalFormattingAdd3ColorScaleFormulaRuleW(
        handle: ConditionalFormattingHandle,
        minColor: ::std::os::raw::c_int,
        midColor: ::std::os::raw::c_int,
        maxColor: ::std::os::raw::c_int,
        minType: ::std::os::raw::c_int,
        minValue: *const wchar_t,
        midType: ::std::os::raw::c_int,
        midValue: *const wchar_t,
        maxType: ::std::os::raw::c_int,
        maxValue: *const wchar_t,
        stopIfTrue: ::std::os::raw::c_int,
    );
}
